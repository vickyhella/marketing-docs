1
00:00:08,480 --> 00:00:10,000
大家好，今天我们将向你展示一个非常酷的演示

2
00:00:10,000 --> 00:00:16,880
这个演示包括 Rancher Desktop

3
00:00:16,880 --> 00:00:19,840
微软 VS Code

4
00:00:19,840 --> 00:00:25,199
一个非常漂亮的 BCI 容器镜像

5
00:00:25,199 --> 00:00:30,560
以及微软非常酷的远程容器

6
00:00:30,560 --> 00:00:33,760
那么我们开始吧

7
00:00:33,760 --> 00:00:37,200
我们从 Rancher Desktop 开始

8
00:00:37,200 --> 00:00:46,000
Rancher Desktop 是一款在桌面上管理容器和 Kubernetes 的软件

9
00:00:46,000 --> 00:00:52,160
你可以在苹果、Windows 和 Linux 上运行 Rancher Desktop

10
00:00:52,160 --> 00:00:55,280
使用 Rancher Desktop 的原因

11
00:00:55,280 --> 00:01:03,120
是它能让你管理容器，因此你可以构建、推送和拉取容器

12
00:01:03,120 --> 00:01:05,360
你可以很容易的与 Kubernetes 进行交互

13
00:01:05,360 --> 00:01:10,110
你可以有自己的本地 Kubernetes 环境

14
00:01:10,120 --> 00:01:15,119
它建立在 K3s qctl 等知名项目之上

15
00:01:15,119 --> 00:01:21,680
能让你简单地与 Kubernetes 进行交互

16
00:01:21,680 --> 00:01:24,320
你后面会见识到的

17
00:01:24,640 --> 00:01:29,920
现在我们介绍 SUSE 容器镜像

18
00:01:29,920 --> 00:01:37,360
我们的基础容器镜像，即 BCI base 镜像是 Linux 企业服务器 15

19
00:01:37,360 --> 00:01:41,920
这是一个占用空间非常低的安全镜像

20
00:01:41,920 --> 00:01:46,479
你可以用 Podman 或 Docker 等工具来拉取它

21
00:01:46,479 --> 00:01:53,119
如此处所示，很多架构都支持它

22
00:01:53,119 --> 00:01:56,719
它能让你的操作变得简单轻松

23
00:01:56,719 --> 00:01:59,840
现在我们介绍 VS Code 远程容器扩展

24
00:01:59,840 --> 00:02:07,759
这是 VS Code 非常酷的一个功能

25
00:02:07,759 --> 00:02:14,480
它支持将 Docker 容器设置为本地开发环境

26
00:02:14,480 --> 00:02:18,160
因此你可以在任何地方运行相同的环境

27
00:02:18,160 --> 00:02:22,480
所以，你可以用一个容器连接你的本地环境

28
00:02:22,480 --> 00:02:26,560
你在容器中共享代码并运行代码

29
00:02:26,560 --> 00:02:35,040
我们会使用我们的工程师 Matt Farina 制作的这个 Chart

30
00:02:35,040 --> 00:02:41,120
然后，使用 Go 编写的这个 Hello World 应用程序

31
00:02:41,120 --> 00:02:47,760
首先，使用 Helm Chart 来部署应用程序

32
00:02:47,760 --> 00:02:53,760
因此，先安装我们在仓库中看到的 Chart

33
00:02:53,760 --> 00:02:57,840
运行 helm install，按照需求命名

34
00:02:57,840 --> 00:03:01,920
设置参数和 Chart 的内容

35
00:03:01,920 --> 00:03:05,440
现在转发端口，以便我们可以访问应用程序

36
00:03:05,440 --> 00:03:10,480
这是一个 Hello World 网页应用程序

37
00:03:10,480 --> 00:03:13,680
因此我们访问本地 8080 端口

38
00:03:13,680 --> 00:03:16,879
这里会显示 Hello Rancher Desktop

39
00:03:16,879 --> 00:03:19,040
不错不错

40
00:03:19,040 --> 00:03:26,560
现在，我们看看应用程序的真实代码

41
00:03:26,560 --> 00:03:31,599
在 VS Code 打开我们的仓库代码

42
00:03:31,760 --> 00:03:40,239
我们会看到运行容器的选项

43
00:03:40,239 --> 00:03:43,200
这是我之前介绍的远程容器功能

44
00:03:43,200 --> 00:03:51,040
这样，你可以使用容器用作开发环境

45
00:03:51,040 --> 00:04:01,280
我们只需要在弹出的 dev 容器中

46
00:04:01,280 --> 00:04:05,840
添加这个包含 JSON 和 Dockerfile 的 devcontainer 文件夹

47
00:04:05,840 --> 00:04:10,959
现在终端中有了可以做 ls 的容器

48
00:04:10,959 --> 00:04:13,519
现在，运行我们的应用程序

49
00:04:13,519 --> 00:04:17,199
这是一个 Go 应用程序，我们运行 go run

50
00:04:17,199 --> 00:04:19,440
然后应用程序会启动

51
00:04:19,440 --> 00:04:21,680
当它启动 VS Code 时

52
00:04:21,680 --> 00:04:31,120
你将检测到它正在后台运行，并让你打开浏览器

53
00:04:31,120 --> 00:04:35,040
非常简单对吧

54
00:04:35,040 --> 00:04:38,000
我们现在更改应用程序

55
00:04:38,000 --> 00:04:44,960
例如，我们不想要显示 Hello Rancher Desktop

56
00:04:44,960 --> 00:04:46,560
而是显示 Hello World

57
00:04:46,560 --> 00:04:50,960
因此，我们在这里直接修改

58
00:04:50,960 --> 00:04:52,880
再次运行容器

59
00:04:52,880 --> 00:04:56,639
这次使用引导模式

60
00:04:56,639 --> 00:05:04,080
你会再次看到打开浏览器的选项，现在此处显示 Hello World

61
00:05:04,080 --> 00:05:06,560
非常简单吧

62
00:05:06,560 --> 00:05:16,800
你可以在任何环境中使用相同的容器

63
00:05:16,800 --> 00:05:19,600
但是，在 devcontainer 文件夹外面还有另一个 Dockerfile

64
00:05:19,600 --> 00:05:22,400
这是一个常见的 Dockerfile

65
00:05:22,400 --> 00:05:28,320
它会使用同一个应用程序运行一个空容器

66
00:05:28,320 --> 00:05:39,280
使用这个 Dockerfile 构建新镜像时，我们将能看到差别

67
00:05:39,280 --> 00:05:44,880
我们构建版本 0.2.0，我们构建容器

68
00:05:44,880 --> 00:05:47,440
现在如果我们检查镜像

69
00:05:47,440 --> 00:05:49,840
我们会看到神奇的事情

70
00:05:49,840 --> 00:05:56,639
VS Code 开发容器很大

71
00:05:56,639 --> 00:06:00,479
因为它包含了大量的库和其他东西

72
00:06:00,479 --> 00:06:07,199
但是你看，这个空容器只有 6 MB

73
00:06:07,199 --> 00:06:11,759
它非常非常非常小

74
00:06:11,759 --> 00:06:17,680
现在，我们更新 Helm Chart

75
00:06:17,680 --> 00:06:20,000
记得我们部署了 Helm Chart 吧

76
00:06:20,000 --> 00:06:27,840
我们使用这个新镜像来部署 Helm Chart

77
00:06:27,840 --> 00:06:31,039
使用标签来标记它

78
00:06:31,039 --> 00:06:35,120
我们会看到应用程序再次运行

79
00:06:35,120 --> 00:06:45,759
这是一个新应用程序，它会显示 Hello World 而不是 Hello Rancher Desktop

80
00:06:45,759 --> 00:06:56,080
总结一下，我展示的是非常简单地使用不同的环境

81
00:06:56,080 --> 00:07:01,440
以及不同的工具和解决方案来测试你的软件

82
00:07:01,440 --> 00:07:07,400
这就是今天的全部内容，希望你喜欢这个演示

